; TOS means Top-Of-Stack

; The function disassembled and the number of its formal parameters.
Function: main/0

; Constants used by the function (zero based index).
Constants: None, 5, 6

; Local variables in the function (zero based index).
Locals: x, y, z

; Global functions used in the function (zero based index).
Globals: print

BEGIN
; Pushes Constants[1] onto the operand stack.

          LOAD_CONST                     1

; Stores the top of operand stack into Locals[0]. Pops the top of
; operand stack.

          STORE_FAST                     0

; Pushes Constants[2] onto the operand stack.

          LOAD_CONST                     2

; Stores the top of operand stack into Locals[1]. Pops the top of
; operand stack.

          STORE_FAST                     1

; Pushes Locals[0] and Locals[1] onto the operand stack.

          LOAD_FAST                      0

          LOAD_FAST                      1

; Implements TOS = TOS1 + TOS

          BINARY_ADD

; Stores the top of operand stack into Locals[2]. Pops the top of
; operand stack.

         STORE_FAST                     2

; Pushes Globals[0] and Locals[2] onto the operand stack.

          LOAD_GLOBAL                    0

          LOAD_FAST                      2

; Calls a function with one positional parameter. Pops the positional
; parameter and the function from the operand stack. The result of the
; function is pushed on the operand stack (the function `print`
; returns `None`).

          CALL_FUNCTION                  1

; Pops operand stack.

          POP_TOP

; Pushes Constants[0] onto the operand stack.

         LOAD_CONST                     0

; Pops the TOS and returns TOS to the caller of the function.

         RETURN_VALUE
END
